/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Root
         * @description Serves the main Vue application.
         */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/extract_text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Extract Text From Image
         * @description Receives a page number and a base64-encoded image, and returns the extracted text.
         *     - Validates the request body using the `ImageExtractionRequest` model.
         *     - Uses a dependency-injected LLM client.
         *     - Handles specific LLM errors and maps them to typed `AppError` responses.
         */
        post: operations["extract_text_from_image_api_extract_text_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/match-companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Match Companies
         * @description Accepts a list of company names and returns the closest matches
         *     from the Companies House database using Full-Text Search.
         *     For each name, it uses an LLM to recommend the best match.
         */
        post: operations["match_companies_api_match_companies_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** CompanyMatch */
        CompanyMatch: {
            /** Companyname */
            CompanyName: string;
            /** Companynumber */
            CompanyNumber: string;
            /** Regaddress.Careof */
            "RegAddress.CareOf"?: string | null;
            /** Regaddress.Pobox */
            "RegAddress.POBox"?: string | null;
            /** Regaddress.Addressline1 */
            "RegAddress.AddressLine1"?: string | null;
            /** Regaddress.Addressline2 */
            "RegAddress.AddressLine2"?: string | null;
            /** Regaddress.Posttown */
            "RegAddress.PostTown"?: string | null;
            /** Regaddress.County */
            "RegAddress.County"?: string | null;
            /** Regaddress.Country */
            "RegAddress.Country"?: string | null;
            /** Regaddress.Postcode */
            "RegAddress.PostCode"?: string | null;
            /** Companycategory */
            CompanyCategory?: string | null;
            /** Companystatus */
            CompanyStatus?: string | null;
            /** Countryoforigin */
            CountryOfOrigin?: string | null;
            /** Dissolutiondate */
            DissolutionDate?: string | null;
            /** Incorporationdate */
            IncorporationDate?: string | null;
            /** Accounts.Accountrefday */
            "Accounts.AccountRefDay"?: number | null;
            /** Accounts.Accountrefmonth */
            "Accounts.AccountRefMonth"?: number | null;
            /** Accounts.Nextduedate */
            "Accounts.NextDueDate"?: string | null;
            /** Accounts.Lastmadeupdate */
            "Accounts.LastMadeUpDate"?: string | null;
            /** Accounts.Accountcategory */
            "Accounts.AccountCategory"?: string | null;
            /** Returns.Nextduedate */
            "Returns.NextDueDate"?: string | null;
            /** Returns.Lastmadeupdate */
            "Returns.LastMadeUpDate"?: string | null;
            /** Mortgages.Nummortcharges */
            "Mortgages.NumMortCharges"?: number | null;
            /** Mortgages.Nummortoutstanding */
            "Mortgages.NumMortOutstanding"?: number | null;
            /** Mortgages.Nummortpartsatisfied */
            "Mortgages.NumMortPartSatisfied"?: number | null;
            /** Mortgages.Nummortsatisfied */
            "Mortgages.NumMortSatisfied"?: number | null;
            /** Siccode.Sictext 1 */
            "SICCode.SicText_1"?: string | null;
            /** Siccode.Sictext 2 */
            "SICCode.SicText_2"?: string | null;
            /** Siccode.Sictext 3 */
            "SICCode.SicText_3"?: string | null;
            /** Siccode.Sictext 4 */
            "SICCode.SicText_4"?: string | null;
            /** Limitedpartnerships.Numgenpartners */
            "LimitedPartnerships.NumGenPartners"?: number | null;
            /** Limitedpartnerships.Numlimpartners */
            "LimitedPartnerships.NumLimPartners"?: number | null;
            /** Uri */
            URI?: string | null;
            /** Previousname 1.Condate */
            "PreviousName_1.CONDATE"?: string | null;
            /** Previousname 1.Companyname */
            "PreviousName_1.CompanyName"?: string | null;
            /** Previousname 2.Condate */
            "PreviousName_2.CONDATE"?: string | null;
            /** Previousname 2.Companyname */
            "PreviousName_2.CompanyName"?: string | null;
            /** Previousname 3.Condate */
            "PreviousName_3.CONDATE"?: string | null;
            /** Previousname 3.Companyname */
            "PreviousName_3.CompanyName"?: string | null;
            /** Previousname 4.Condate */
            "PreviousName_4.CONDATE"?: string | null;
            /** Previousname 4.Companyname */
            "PreviousName_4.CompanyName"?: string | null;
            /** Previousname 5.Condate */
            "PreviousName_5.CONDATE"?: string | null;
            /** Previousname 5.Companyname */
            "PreviousName_5.CompanyName"?: string | null;
            /** Previousname 6.Condate */
            "PreviousName_6.CONDATE"?: string | null;
            /** Previousname 6.Companyname */
            "PreviousName_6.CompanyName"?: string | null;
            /** Previousname 7.Condate */
            "PreviousName_7.CONDATE"?: string | null;
            /** Previousname 7.Companyname */
            "PreviousName_7.CompanyName"?: string | null;
            /** Previousname 8.Condate */
            "PreviousName_8.CONDATE"?: string | null;
            /** Previousname 8.Companyname */
            "PreviousName_8.CompanyName"?: string | null;
            /** Previousname 9.Condate */
            "PreviousName_9.CONDATE"?: string | null;
            /** Previousname 9.Companyname */
            "PreviousName_9.CompanyName"?: string | null;
            /** Previousname 10.Condate */
            "PreviousName_10.CONDATE"?: string | null;
            /** Previousname 10.Companyname */
            "PreviousName_10.CompanyName"?: string | null;
            /** Confstmtnextduedate */
            ConfStmtNextDueDate?: string | null;
            /** Confstmtlastmadeupdate */
            ConfStmtLastMadeUpDate?: string | null;
            /**
             * Score
             * @description Relevance score of the match
             */
            score: number;
        } & {
            [key: string]: unknown;
        };
        /**
         * CompanyMatchRequest
         * @description Defines the structure for the company matching request.
         *     It expects a list of one or more company names to search for.
         */
        CompanyMatchRequest: {
            /**
             * Company Names
             * @description A non-empty list of company names to find matches for.
             */
            company_names: string[];
        };
        /**
         * CompanyMatchResponse
         * @description Defines the response structure for the company matching endpoint.
         *     The keys of the 'matches' dictionary are the original search terms.
         *     The values are objects containing the recommended match and other matches.
         */
        CompanyMatchResponse: {
            /** Matches */
            matches: {
                [key: string]: components["schemas"]["CompanyMatchResult"];
            };
        };
        /**
         * CompanyMatchResult
         * @description Represents the result of a company match, including a recommended match
         *     and a list of other potential matches.
         */
        CompanyMatchResult: {
            recommended_match?: components["schemas"]["CompanyMatch"] | null;
            /** Other Matches */
            other_matches: components["schemas"]["CompanyMatch"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * ImageExtractionRequest
         * @description Defines the structure for the image extraction request.
         */
        ImageExtractionRequest: {
            /** Page Number */
            page_number: number;
            /** Image Data */
            image_data: string;
        };
        /**
         * TextExtractionResponse
         * @description Defines the response structure for the text extraction endpoint.
         */
        TextExtractionResponse: {
            /** Page Number */
            page_number: number;
            /** Text */
            text: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    extract_text_from_image_api_extract_text_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ImageExtractionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextExtractionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    match_companies_api_match_companies_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompanyMatchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompanyMatchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
