// frontend/static/js/db.js

/**
 * Initializes and configures the Dexie.js (IndexedDB) database.
 * This script should be loaded before any other application script that needs database access.
 *
 * The database 'AIGENT_DB' stores all application data on the client-side.
 *
 * Schema Definition:
 * - agents: Stores individual agent configurations.
 * - ++id: Auto-incrementing primary key.
 * - name: The unique name of the agent.
 * - prompt: The detailed system prompt for the agent.
 * - rankings: An array of objects defining the ranking specs.
 *
 * - agentSets: Stores collections of agents.
 * - ++id: Auto-incrementing primary key.
 * - name: The name of the agent set.
 * - agentIds: An array of agent 'id's belonging to this set.
 *
 * - analysisRuns: Represents a single analysis task.
 * - ++id: Auto-incrementing primary key.
 * - agentSetId: Foreign key linking to the 'agentSets' table.
 * - name: A user-defined name for this analysis run (e.g., "Q3 Financials Review").
 * - context: The overall goal/context provided by the user for this run.
 * - createdAt: Timestamp when the run was created.
 * - status: The current status of the run ('pending', 'running', 'completed').
 *
 * - documents: Stores the documents uploaded for a specific analysis run.
 * - ++id: Auto-incrementing primary key.
 * - analysisRunId: Foreign key linking to the 'analysisRuns' table.
 * - filename: The original name of the uploaded file.
 * - text: The extracted text content or base64 for images.
 * - filetype: The MIME type of the file.
 *
 * - results: Stores the output from each agent for a given analysis run.
 * - ++id: Auto-incrementing primary key.
 * - analysisRunId: Foreign key linking to the 'analysisRuns' table.
 * - agentId: The ID of the agent that produced this result.
 * - agentName: The name of the agent (denormalized for easy display).
 * - report: The textual report generated by the agent.
 * - rankings: The structured ranking data from the agent.
 * - createdAt: Timestamp when the result was received.
 */

// Initialize Dexie and define the database schema.
const db = new Dexie('AIGENT_DB');

db.version(1).stores({
  agents: '++id, &name',
  agentSets: '++id, &name',
  analysisRuns: '++id, agentSetId, createdAt',
  documents: '++id, analysisRunId',
  results: '++id, analysisRunId, agentId, createdAt'
});

// Open the database. This is an asynchronous operation.
// We can attach a .catch() to handle any errors during initialization.
db.open().catch(function (e) {
  console.error("Open failed: " + e.stack);
});

// Make the db instance globally available to other scripts
window.db = db;
